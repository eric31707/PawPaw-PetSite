<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .progressbar {
            counter-reset: step;
        }

            .progressbar li {
                list-style-type: none;
                width: 25%;
                float: left;
                font-size: 12px;
                position: relative;
                text-align: center;
                text-transform: uppercase;
                color: #7d7d7d;
            }

                .progressbar li:before {
                    width: 30px;
                    height: 30px;
                    content: counter(step);
                    counter-increment: step;
                    line-height: 30px;
                    border: 2px solid #7d7d7d;
                    display: block;
                    text-align: center;
                    margin: 0 auto 10px auto;
                    border-radius: 50%;
                    background-color: white;
                }

                .progressbar li:after {
                    width: 100%;
                    height: 2px;
                    content: '';
                    position: absolute;
                    background-color: #7d7d7d;
                    top: 15px;
                    left: -50%;
                    z-index: -1;
                }

                .progressbar li:first-child:after {
                    content: none;
                }

                .progressbar li.active {
                    color: green;
                }

                    .progressbar li.active:before {
                        border-color: #55b776;
                    }

                    .progressbar li.active + li:after {
                        background-color: #55b776;
                    }
    </style>
</head>
<body>
    <div class="container" id="app" style="font-size:20px">
        <main role="main" class="pb-3">
            <div>
                <p>　</p>
                <ul class="progressbar">
                    <li class="active">購物車</li>
                    <li>訂單資料</li>
                    <li>建立訂單</li>
                    <li>付款</li>
                </ul>
                <p>　</p>
                <p>　</p>
            </div>

            <div class="card shadow rounded">
                <h5 class="card-header">購物車</h5>
                <div class="card-body">
                    <table class="table">
                        <thead class="table-borderless">
                            <tr>
                                <th class="text-center">商品名稱</th>
                                <th class="text-center">尺寸</th>
                                <th class="text-center">口味</th>
                                <th class="text-center">顏色</th>
                                <th class="text-center">單價</th>
                                <th class="text-center">數量</th>
                                <th class="text-center">小計</th>

                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="product in cartItemsDtos.items">
                                <td class="text-center">{{product.product.name}}</td>
                                <td class="text-center">{{product.product.size}}</td>
                                <td class="text-center">{{product.product.flavor}}</td>
                                <td class="text-center">{{product.product.color}}</td>
                                <td class="text-center">{{formatCurrency(product.product.price)}}</td>
                                <td class="text-center">
                                    <button class="btn btn-sm btn-outline-danger mr-2" @@click="subQty(product)">-</button>
                                    <span>{{product.qty}}</span>
                                    <button class="btn btn-sm btn-outline-primary ml-2" @@click="addQty(product)">+</button>
                                </td>
                                <td class="text-center">{{formatCurrency(product.subTotal)}}</td>
                                <td>
                                    <button class="btn btn-sm btn-danger" @@click="showModal(product.product.id)">刪除</button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <div class="row mt-2">
                        <div class="col text-right pr-5">
                            <h5>總計：{{cartItemsDtos.total}}</h5>
                        </div>
                    </div>
                    <p class="text-center text-dark" v-model="cartIsEmpty">{{cartIsEmpty}}</p>
                    <hr />
                </div>
            </div>


            <p>　</p>
            <div class="container">
                <p class="row justify-content-end" style="margin-top:15px;">
                    <a class="btn btn-primary btn-sm text-white"
                       style="padding-left:56px;padding-right:56px;margin-right:56px" href="~/WillyView/ProductIndex">繼續購物</a>
                    <a class="btn btn-primary btn-sm text-white" style="padding-left:56px;padding-right:56px;" asp-action="secondStepIndex">前往結帳</a>
                </p>
            </div>
        </main>
        <div class="modal" tabindex="-1" id="deleteConfirm">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">移除商品</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @@click="cancel()">
                            <i class="fa-sharp fa-solid fa-xmark"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>您是否要移除此商品？</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @@click="cancel()">取消</button>
                        <button type="button" class="btn btn-primary" @@click="deleteCartItem(productIdToDelete)">確定</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @section Scripts{
        <script src="https://unpkg.com/vue@next"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.3.3/axios.min.js"></script>
        <script>
            var webApiBaseUri = "https://localhost:7150";
            var app = {
                data() {
                    return {
                        cartItemsDtos: [],
                        productIdToDelete: 0,
                        cartIsEmpty: "",
                        newQty: 0

                    };
                },

                mounted: function (event) {
                    let _this = this;
                    _this.getCartItems();
                },
                methods: {
                    formatCurrency(value) {
                        return value.toLocaleString('zh-TW', {
                            style: 'currency', currency: 'TWD', minimumFractionDigits: 0,
                            maximumFractionDigits: 0,
                        });
                    },
                    getCartItems() {
                        let _this = this;
                        axios.get(`${webApiBaseUri}/api/Carts`, { withCredentials: true, })
                            .then(response => {
                                _this.cartItemsDtos = response.data;
                                _this.cartItemsDtos.total = _this.formatCurrency(_this.cartItemsDtos.total)
                                if (_this.cartItemsDtos.items.length == 0) {
                                    _this.cartIsEmpty = "購物車內沒有商品";
                                }
                            })
                            .catch(error => {
                                console.log(error);
                            });
                    },
                    showModal(productId) {
                        let _this = this;
                        _this.productIdToDelete = productId;
                        $('#deleteConfirm').modal('show');
                    },
                    cancel() {
                        let _this = this;
                        _this.productIdToDelete = 0;
                        $('#deleteConfirm').modal('hide');
                    },
                    deleteCartItem(productIdToDelete) {
                        let _this = this;
                        axios.delete(`${webApiBaseUri}/api/Carts/${productIdToDelete}`, { withCredentials: true, })
                            .then(response => {
                                _this.getCartItems();
                                store.dispatch('getCartQuantity')
                            })
                            .catch(error => {
                                console.log(error);
                            });
                        $('#deleteConfirm').modal('hide');
                    },
                    addQty(product) {
                        let _this = this;
                        _this.newQty = product.qty + 1;
                        var request = {
                            "newQty": _this.newQty
                        };
                        axios.put(`${webApiBaseUri}/api/Carts/${product.product.id}`, request, { withCredentials: true, })
                            .then(response => {
                                _this.getCartItems();
                            })
                            .catch(error => {
                                console.log(error);
                            });
                    },
                    subQty(product) {
                        let _this = this;
                        if (product.qty == 1) {
                            _this.showModal(product.product.id);
                        }
                        else {
                            _this.newQty = product.qty - 1;

                            var request = {
                                "newQty": _this.newQty
                            };
                            axios.put(`${webApiBaseUri}/api/Carts/${product.product.id}`, request, { withCredentials: true, })
                                .then(response => {
                                    _this.getCartItems();
                                })
                                .catch(error => {
                                    console.log(error);
                                });
                        }


                    }


                },
            }
            Vue.createApp(app).mount("#app");
        </script>
    }
</body>

</html>
